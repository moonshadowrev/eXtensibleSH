name: Update Third-Party List

on:
  push:
    branches: [ main ]
    paths:
      - 'thirdparty/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'thirdparty/**'

jobs:
  update-list:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          set -e  # Exit on any error
          
          echo "Installing dependencies..."
          sudo apt-get update -q
          sudo apt-get install -y jq curl wget
          
          # Verify installations
          echo "Verifying installations:"
          jq --version
          curl --version | head -1
          wget --version | head -1
          echo "✓ All dependencies installed successfully"
          
      - name: Validate third-party scripts
        run: |
          echo "Validating third-party script entries..."
          valid_count=0
          invalid_count=0
          
          while read -r line; do
            # Skip comments and empty lines
            if [[ "$line" =~ ^#.*$ ]] || [[ -z "$line" ]]; then
              continue
            fi
            
            # Parse line using awk to handle URLs with colons properly
            name=$(echo "$line" | cut -d: -f1)
            category=$(echo "$line" | cut -d: -f2)
            # Get URL and description by finding the last colon
            temp=$(echo "$line" | cut -d: -f3-)
            description=$(echo "$temp" | rev | cut -d: -f1 | rev)
            url=$(echo "$temp" | rev | cut -d: -f2- | rev)
            
            echo "Validating: $name"
            echo "URL: $url"
            
            # Basic URL accessibility check (allow redirects) - don't fail on curl errors
            if curl -s -L -I "$url" 2>/dev/null | head -1 | grep -q "200\|301\|302" 2>/dev/null; then
              echo "✓ $name - URL accessible"
              valid_count=$((valid_count + 1))
            else
              echo "⚠️  $name - URL may not be accessible: $url"
              invalid_count=$((invalid_count + 1))
              # Don't fail the build, just warn
            fi
            
          done < thirdparty/list.txt
          
          echo "Validation complete: $valid_count valid, $invalid_count warnings"
          # Always succeed this step
          exit 0
          
      - name: Generate sorted third-party list
        run: |
          set -e  # Exit on any error
          
          echo "Generating sorted third-party list..."
          
          # For now, just preserve the original list order to avoid complexity
          # The list is already organized by categories manually
          echo "Keeping original third-party list organization"
          
          # Validate the list format
          entry_count=0
          while read -r line; do
            if [[ "$line" =~ ^#.*$ ]] || [[ -z "$line" ]]; then
              continue
            fi
            entry_count=$((entry_count + 1))
          done < thirdparty/list.txt
          
          echo "Validated $entry_count third-party entries"
          
      - name: Generate third-party registry
        run: |
          set -e  # Exit on any error
          
          echo "Generating third-party registry..."
          
          # Create basic registry structure using jq
          echo '{}' | jq '{
            "last_updated": now | strftime("%Y-%m-%dT%H:%M:%SZ"),
            "total_scripts": 0,
            "categories": {
              "containerization": "Container & Orchestration",
              "webservers": "Web Servers",
              "monitoring": "Monitoring",
              "development": "Development Tools",
              "databases": "Database Tools",
              "security": "Security & VPN",
              "storage": "File Management",
              "misc": "System Utilities"
            },
            "scripts": []
          }' > thirdparty/registry.json
          
          # Add scripts
          script_count=0
          while read -r line; do
            # Skip comments and empty lines
            if [[ "$line" =~ ^#.*$ ]] || [[ -z "$line" ]]; then
              continue
            fi
            
            # Parse line properly
            name=$(echo "$line" | cut -d: -f1)
            category=$(echo "$line" | cut -d: -f2)
            temp=$(echo "$line" | cut -d: -f3-)
            description=$(echo "$temp" | rev | cut -d: -f1 | rev)
            url=$(echo "$temp" | rev | cut -d: -f2- | rev)
            
            echo "Adding to registry: $name"
            
            # Add script to registry
            jq --arg name "$name" --arg category "$category" --arg url "$url" --arg description "$description" \
               '.scripts += [{"name": $name, "category": $category, "url": $url, "description": $description}]' \
               thirdparty/registry.json > temp.json && mv temp.json thirdparty/registry.json
            
            script_count=$((script_count + 1))
          done < thirdparty/list.txt
          
          # Update total count
          jq --arg count "$script_count" '.total_scripts = ($count | tonumber)' thirdparty/registry.json > temp.json && mv temp.json thirdparty/registry.json
          
          echo "Generated registry with $script_count scripts"
          
      - name: Generate script files
        run: |
          set -e  # Exit on any error
          
          echo "Generating script files..."
          
          # Remove old generated scripts (keep README.md and list.txt)
          find thirdparty -name "*.sh" -not -name "manual-*" -delete 2>/dev/null || true
          
          script_files_created=0
          while read -r line; do
            # Skip comments and empty lines
            if [[ "$line" =~ ^#.*$ ]] || [[ -z "$line" ]]; then
              continue
            fi
            
            # Parse line properly
            name=$(echo "$line" | cut -d: -f1)
            category=$(echo "$line" | cut -d: -f2)
            temp=$(echo "$line" | cut -d: -f3-)
            description=$(echo "$temp" | rev | cut -d: -f1 | rev)
            url=$(echo "$temp" | rev | cut -d: -f2- | rev)
            
            echo "Creating script file: $name.sh"
            
            # Create enhanced script file with better error handling
            {
              echo '#!/bin/bash'
              echo "# Third-party script: $name"
              echo "# Category: $category"
              echo "# Description: $description"
              echo "# Source: $url"
              echo "# Generated by eXtensibleSH workflow"
              echo ""
              echo "set -euo pipefail"
              echo ""
              echo "# Colors for output"
              echo "RED='\\033[0;31m'"
              echo "GREEN='\\033[0;32m'"
              echo "YELLOW='\\033[1;33m'"
              echo "NC='\\033[0m' # No Color"
              echo ""
              echo "echo -e \"\${GREEN}Installing $name...\${NC}\""
              echo "echo -e \"\${YELLOW}Description: $description\${NC}\""
              echo "echo -e \"\${YELLOW}Source: $url\${NC}\""
              echo "echo"
              echo ""
              echo "# Download and execute with error handling"
              echo "if command -v curl >/dev/null 2>&1; then"
              echo "    echo -e \"\${GREEN}Downloading and executing installation script...\${NC}\""
              echo "    if curl -fsSL \"$url\" | bash; then"
              echo "        echo -e \"\${GREEN}✓ $name installation completed successfully!\${NC}\""
              echo "    else"
              echo "        echo -e \"\${RED}✗ Installation failed. Please check the source URL manually.\${NC}\""
              echo "        echo -e \"\${YELLOW}Manual installation: $url\${NC}\""
              echo "        exit 1"
              echo "    fi"
              echo "elif command -v wget >/dev/null 2>&1; then"
              echo "    echo -e \"\${GREEN}Downloading and executing installation script...\${NC}\""
              echo "    if wget -qO- \"$url\" | bash; then"
              echo "        echo -e \"\${GREEN}✓ $name installation completed successfully!\${NC}\""
              echo "    else"
              echo "        echo -e \"\${RED}✗ Installation failed. Please check the source URL manually.\${NC}\""
              echo "        echo -e \"\${YELLOW}Manual installation: $url\${NC}\""
              echo "        exit 1"
              echo "    fi"
              echo "else"
              echo "    echo -e \"\${RED}✗ Neither curl nor wget found. Please install one of them first.\${NC}\""
              echo "    exit 1"
              echo "fi"
            } > "thirdparty/$name.sh"
            
            chmod +x "thirdparty/$name.sh"
            script_files_created=$((script_files_created + 1))
            echo "  -> Created: $name.sh"
          done < thirdparty/list.txt
          
          echo "Generated $script_files_created script files"
          
      - name: Validate generated files
        run: |
          set -e  # Exit on any error
          
          echo "Validating generated files..."
          
          # Check registry JSON is valid
          if jq empty thirdparty/registry.json 2>/dev/null; then
            echo "✓ Registry JSON is valid"
          else
            echo "✗ Registry JSON is invalid"
            exit 1
          fi
          
          # Check script files have proper permissions
          script_count=0
          for script in thirdparty/*.sh; do
            if [ -f "$script" ] && [ -x "$script" ]; then
              script_count=$((script_count + 1))
            fi
          done
          
          echo "✓ Generated $script_count executable script files"
          
      - name: Create Pull Request
        if: github.event_name == 'push'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'Update third-party list and registry [automated]'
          title: 'Auto-update: Third-party List and Registry'
          body: 'Automated update of third-party scripts list and registry'
          branch: update-thirdparty-list
          delete-branch: true 