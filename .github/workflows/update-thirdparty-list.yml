name: Update Third-Party List

on:
  push:
    branches: [ main ]
    paths:
      - 'thirdparty/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'thirdparty/**'

jobs:
  update-list:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl wget
          
      - name: Validate third-party scripts
        run: |
          echo "Validating third-party script entries..."
          valid_count=0
          invalid_count=0
          
          while IFS=':' read -r name category url description; do
            # Skip comments and empty lines
            if [[ "$name" =~ ^#.*$ ]] || [[ -z "$name" ]]; then
              continue
            fi
            
            echo "Validating: $name"
            
            # Basic URL accessibility check (allow redirects)
            if curl -s -L -I "$url" | head -1 | grep -q "200\|301\|302"; then
              echo "✓ $name - URL accessible"
              ((valid_count++))
            else
              echo "⚠️  $name - URL may not be accessible: $url"
              ((invalid_count++))
              # Don't fail the build, just warn
            fi
            
          done < thirdparty/list.txt
          
          echo "Validation complete: $valid_count valid, $invalid_count warnings"
          
      - name: Generate sorted third-party list
        run: |
          echo "Generating sorted third-party list..."
          
          # Create temporary file for processing
          temp_file=$(mktemp)
          
          # Extract comments and header, preserve structure
          awk '
          /^#/ { print; next }
          /^$/ { print; next }
          { 
            split($0, parts, ":")
            if (length(parts) >= 4) {
              category = parts[2]
              name = parts[1]
              # Store for sorting within categories
              entries[category][name] = $0
            }
          }
          END {
            # Print entries grouped by category
            categories["containerization"] = "# Container & Orchestration"
            categories["webservers"] = "# Web Servers"
            categories["monitoring"] = "# Monitoring"
            categories["development"] = "# Development Tools"
            categories["databases"] = "# Database Tools"
            categories["security"] = "# Security & VPN"
            categories["storage"] = "# File Management"
            categories["misc"] = "# System Utilities"
            
            for (cat in categories) {
              if (length(entries[cat]) > 0) {
                print categories[cat]
                for (name in entries[cat]) {
                  print entries[cat][name]
                }
                print ""
              }
            }
          }' thirdparty/list.txt > "$temp_file"
          
          # Only update if the file has valid content
          if [ -s "$temp_file" ]; then
            # Preserve header comments
            head -4 thirdparty/list.txt > thirdparty/list.txt.new
            echo "" >> thirdparty/list.txt.new
            tail -n +5 "$temp_file" >> thirdparty/list.txt.new
            mv thirdparty/list.txt.new thirdparty/list.txt
          fi
          
          rm -f "$temp_file"
          
      - name: Generate third-party registry
        run: |
          echo "Generating third-party registry..."
          
          # Create basic registry structure using jq
          echo '{}' | jq '{
            "last_updated": now | strftime("%Y-%m-%dT%H:%M:%SZ"),
            "total_scripts": 0,
            "categories": {
              "containerization": "Container & Orchestration",
              "webservers": "Web Servers",
              "monitoring": "Monitoring",
              "development": "Development Tools",
              "databases": "Database Tools",
              "security": "Security & VPN",
              "storage": "File Management",
              "misc": "System Utilities"
            },
            "scripts": []
          }' > thirdparty/registry.json
          
          # Add scripts
          script_count=0
          while IFS=':' read -r name category url description; do
            # Skip comments and empty lines
            if [[ "$name" =~ ^#.*$ ]] || [[ -z "$name" ]]; then
              continue
            fi
            
            # Add script to registry
            jq --arg name "$name" --arg category "$category" --arg url "$url" --arg description "$description" \
               '.scripts += [{"name": $name, "category": $category, "url": $url, "description": $description}]' \
               thirdparty/registry.json > temp.json && mv temp.json thirdparty/registry.json
            
            ((script_count++))
          done < thirdparty/list.txt
          
          # Update total count
          jq --arg count "$script_count" '.total_scripts = ($count | tonumber)' thirdparty/registry.json > temp.json && mv temp.json thirdparty/registry.json
          
          echo "Generated registry with $script_count scripts"
          
      - name: Generate script files
        run: |
          echo "Generating script files..."
          
          # Remove old generated scripts (keep README.md and list.txt)
          find thirdparty -name "*.sh" -not -name "manual-*" -delete 2>/dev/null || true
          
          while IFS=':' read -r name category url description; do
            # Skip comments and empty lines
            if [[ "$name" =~ ^#.*$ ]] || [[ -z "$name" ]]; then
              continue
            fi
            
            echo "Creating script file: $name.sh"
            
            # Create enhanced script file with better error handling
            {
              echo '#!/bin/bash'
              echo "# Third-party script: $name"
              echo "# Category: $category"
              echo "# Description: $description"
              echo "# Source: $url"
              echo "# Generated by eXtensibleSH workflow"
              echo ""
              echo "set -euo pipefail"
              echo ""
              echo "# Colors for output"
              echo "RED='\\033[0;31m'"
              echo "GREEN='\\033[0;32m'"
              echo "YELLOW='\\033[1;33m'"
              echo "NC='\\033[0m' # No Color"
              echo ""
              echo "echo -e \"\${GREEN}Installing $name...\${NC}\""
              echo "echo -e \"\${YELLOW}Description: $description\${NC}\""
              echo "echo -e \"\${YELLOW}Source: $url\${NC}\""
              echo "echo"
              echo ""
              echo "# Download and execute with error handling"
              echo "if command -v curl >/dev/null 2>&1; then"
              echo "    echo -e \"\${GREEN}Downloading and executing installation script...\${NC}\""
              echo "    if curl -fsSL \"$url\" | bash; then"
              echo "        echo -e \"\${GREEN}✓ $name installation completed successfully!\${NC}\""
              echo "    else"
              echo "        echo -e \"\${RED}✗ Installation failed. Please check the source URL manually.\${NC}\""
              echo "        echo -e \"\${YELLOW}Manual installation: $url\${NC}\""
              echo "        exit 1"
              echo "    fi"
              echo "elif command -v wget >/dev/null 2>&1; then"
              echo "    echo -e \"\${GREEN}Downloading and executing installation script...\${NC}\""
              echo "    if wget -qO- \"$url\" | bash; then"
              echo "        echo -e \"\${GREEN}✓ $name installation completed successfully!\${NC}\""
              echo "    else"
              echo "        echo -e \"\${RED}✗ Installation failed. Please check the source URL manually.\${NC}\""
              echo "        echo -e \"\${YELLOW}Manual installation: $url\${NC}\""
              echo "        exit 1"
              echo "    fi"
              echo "else"
              echo "    echo -e \"\${RED}✗ Neither curl nor wget found. Please install one of them first.\${NC}\""
              echo "    exit 1"
              echo "fi"
            } > "thirdparty/$name.sh"
            
            chmod +x "thirdparty/$name.sh"
          done < thirdparty/list.txt
          
          echo "Generated $(ls thirdparty/*.sh 2>/dev/null | wc -l) script files"
          
      - name: Validate generated files
        run: |
          echo "Validating generated files..."
          
          # Check registry JSON is valid
          if jq empty thirdparty/registry.json; then
            echo "✓ Registry JSON is valid"
          else
            echo "✗ Registry JSON is invalid"
            exit 1
          fi
          
          # Check script files have proper permissions
          script_count=0
          for script in thirdparty/*.sh; do
            if [ -f "$script" ] && [ -x "$script" ]; then
              ((script_count++))
            fi
          done
          
          echo "✓ Generated $script_count executable script files"
          
      - name: Commit changes
        if: github.event_name == 'push'
        uses: EndBug/add-and-commit@v9
        with:
          message: 'Update third-party list and registry [automated]'
          add: 'thirdparty/' 