#!/bin/bash

# eXtensibleSH Pre-commit Hook
# Validates shell scripts, JSON files, and file permissions before commit
# Author: eXtensibleSH Team
# Version: 1.0.0

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Unicode symbols
SUCCESS="✅"
ERROR="❌"
WARNING="⚠️"
INFO="ℹ️"
HOOK="🪝"

echo -e "${BLUE}${HOOK} eXtensibleSH Pre-commit Hook${NC}"
echo -e "${BLUE}═══════════════════════════════════════${NC}"
echo ""

# Initialize counters
total_files=0
passed_files=0
failed_files=0
errors=()

# Function to display error and add to array
add_error() {
    errors+=("$1")
    echo -e "${RED}${ERROR} $1${NC}"
}

# Function to display success message
success_msg() {
    echo -e "${GREEN}${SUCCESS} $1${NC}"
}

# Function to display warning message
warn_msg() {
    echo -e "${YELLOW}${WARNING} $1${NC}"
}

# Function to display info message
info_msg() {
    echo -e "${CYAN}${INFO} $1${NC}"
}

# Get list of staged files
staged_files=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$staged_files" ]; then
    info_msg "No files staged for commit"
    exit 0
fi

echo -e "${PURPLE}Checking staged files...${NC}"
echo ""

# Check shell scripts syntax
echo -e "${BLUE}1. Checking shell script syntax...${NC}"
shell_scripts=$(echo "$staged_files" | grep -E '\.sh$' || true)

if [ -n "$shell_scripts" ]; then
    while IFS= read -r file; do
        if [ -f "$file" ]; then
            total_files=$((total_files + 1))
            echo -n "  Checking $file... "
            
            if bash -n "$file" 2>/dev/null; then
                success_msg "Valid syntax"
                passed_files=$((passed_files + 1))
            else
                failed_files=$((failed_files + 1))
                add_error "Syntax error in $file"
                # Show the actual error
                echo -e "${RED}    Error details:${NC}"
                bash -n "$file" 2>&1 | sed 's/^/    /' || true
            fi
        fi
    done <<< "$shell_scripts"
else
    info_msg "No shell scripts to check"
fi

echo ""

# Check JSON files validity
echo -e "${BLUE}2. Checking JSON file validity...${NC}"
json_files=$(echo "$staged_files" | grep -E '\.json$' || true)

if [ -n "$json_files" ]; then
    while IFS= read -r file; do
        if [ -f "$file" ]; then
            total_files=$((total_files + 1))
            echo -n "  Checking $file... "
            
            if command -v jq >/dev/null 2>&1; then
                if jq . "$file" >/dev/null 2>&1; then
                    success_msg "Valid JSON"
                    passed_files=$((passed_files + 1))
                else
                    failed_files=$((failed_files + 1))
                    add_error "Invalid JSON in $file"
                    # Show the actual error
                    echo -e "${RED}    Error details:${NC}"
                    jq . "$file" 2>&1 | sed 's/^/    /' || true
                fi
            else
                # Fallback to python if jq is not available
                if python3 -c "import json; json.load(open('$file'))" 2>/dev/null; then
                    success_msg "Valid JSON"
                    passed_files=$((passed_files + 1))
                else
                    failed_files=$((failed_files + 1))
                    add_error "Invalid JSON in $file"
                    # Show the actual error
                    echo -e "${RED}    Error details:${NC}"
                    python3 -c "import json; json.load(open('$file'))" 2>&1 | sed 's/^/    /' || true
                fi
            fi
        fi
    done <<< "$json_files"
else
    info_msg "No JSON files to check"
fi

echo ""

# Check executable permissions on shell scripts
echo -e "${BLUE}3. Checking executable permissions...${NC}"
if [ -n "$shell_scripts" ]; then
    while IFS= read -r file; do
        if [ -f "$file" ]; then
            echo -n "  Checking $file permissions... "
            
            if [ -x "$file" ]; then
                success_msg "Executable"
            else
                warn_msg "Not executable (will be fixed)"
                chmod +x "$file"
                git add "$file"
                info_msg "Fixed permissions for $file"
            fi
        fi
    done <<< "$shell_scripts"
else
    info_msg "No shell scripts to check permissions"
fi

echo ""

# Check specific files for eXtensibleSH project
echo -e "${BLUE}4. Checking project-specific requirements...${NC}"

# Check if main scripts are executable
main_scripts=("ex.sh" "dev.sh")
for script in "${main_scripts[@]}"; do
    if echo "$staged_files" | grep -q "^$script$"; then
        echo -n "  Checking $script... "
        if [ -x "$script" ]; then
            success_msg "Main script is executable"
        else
            warn_msg "Main script not executable (will be fixed)"
            chmod +x "$script"
            git add "$script"
            info_msg "Fixed permissions for $script"
        fi
    fi
done

# Check plugins list format
if echo "$staged_files" | grep -q "plugins/list.txt"; then
    echo -n "  Checking plugins/list.txt format... "
    if [ -f "plugins/list.txt" ]; then
        # Check if the format is correct (name:category:os)
        if grep -v "^#" plugins/list.txt | grep -v "^$" | grep -E "^[a-z0-9_-]+:[a-z0-9_-]+:[a-z0-9_,-]+$" >/dev/null 2>&1 || ! grep -v "^#" plugins/list.txt | grep -v "^$" | grep -v "^[a-z0-9_-]*$" >/dev/null 2>&1; then
            success_msg "Valid plugins list format"
        else
            add_error "Invalid format in plugins/list.txt - should be 'name:category:os'"
            failed_files=$((failed_files + 1))
        fi
    fi
fi

# Check metadata.json files in plugins
metadata_files=$(echo "$staged_files" | grep -E "plugins/.*/metadata\.json$" || true)
if [ -n "$metadata_files" ]; then
    while IFS= read -r file; do
        if [ -f "$file" ]; then
            echo -n "  Checking $file structure... "
            
            # Check required fields
            required_fields=("name" "display_name" "description" "category" "version" "author" "supported_os")
            missing_fields=()
            
            for field in "${required_fields[@]}"; do
                if ! jq -e ".$field" "$file" >/dev/null 2>&1; then
                    missing_fields+=("$field")
                fi
            done
            
            if [ ${#missing_fields[@]} -eq 0 ]; then
                # Check if development_only plugins are not listed in plugins/list.txt
                if jq -e ".development_only" "$file" >/dev/null 2>&1; then
                    plugin_name=$(jq -r ".name" "$file" 2>/dev/null || echo "")
                    if [ -n "$plugin_name" ] && echo "$staged_files" | grep -q "plugins/list.txt"; then
                        if grep -q "^$plugin_name:" plugins/list.txt 2>/dev/null; then
                            add_error "Development-only plugin '$plugin_name' should not be listed in plugins/list.txt"
                            failed_files=$((failed_files + 1))
                        else
                            success_msg "Valid metadata structure (development-only)"
                        fi
                    else
                        success_msg "Valid metadata structure (development-only)"
                    fi
                else
                    success_msg "Valid metadata structure"
                fi
            else
                add_error "Missing required fields in $file: ${missing_fields[*]}"
                failed_files=$((failed_files + 1))
            fi
        fi
    done <<< "$metadata_files"
fi

echo ""

# Summary
echo -e "${BLUE}═══════════════════════════════════════${NC}"
echo -e "${BLUE}${HOOK} Pre-commit Hook Summary${NC}"
echo -e "${BLUE}═══════════════════════════════════════${NC}"
echo ""

if [ $total_files -eq 0 ]; then
    info_msg "No files to validate"
    exit 0
fi

echo -e "${CYAN}Total files checked: $total_files${NC}"
echo -e "${GREEN}Passed: $passed_files${NC}"

if [ $failed_files -gt 0 ]; then
    echo -e "${RED}Failed: $failed_files${NC}"
    echo ""
    echo -e "${RED}${ERROR} Commit rejected due to validation errors:${NC}"
    for error in "${errors[@]}"; do
        echo -e "${RED}  • $error${NC}"
    done
    echo ""
    echo -e "${YELLOW}${WARNING} Please fix the errors above and try again.${NC}"
    exit 1
else
    echo -e "${GREEN}Failed: 0${NC}"
    echo ""
    success_msg "All checks passed! Commit proceeding..."
    exit 0
fi 